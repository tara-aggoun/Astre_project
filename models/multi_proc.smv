MODULE memory_module(gnt_L1, bus)
	VAR
		valid : boolean;
		data : array 0..1 of {0, 1};
		out : {0, 1, ACK};
		address : {0, 1};

	ASSIGN
		init(valid) := FALSE;
		next(valid) := case
			!valid & gnt_L1 : TRUE;
			valid : FALSE;
			TRUE : valid;
		esac;

		init(data[0]) := 0;
		init(data[1]) := 0;
		next(data[0]) := case
			gnt_L1 & bus.address = 0 & bus.ctrl = BUS_WRITE & bus.data = 0 : 0;
			gnt_L1 & bus.address = 0 & bus.ctrl = BUS_WRITE & bus.data = 1 : 1;
			TRUE : data[0];
		esac;
		next(data[1]) := case
			gnt_L1 & bus.address = 1 & bus.ctrl = BUS_WRITE & bus.data = 0 : 0;
			gnt_L1 & bus.address = 1 & bus.ctrl = BUS_WRITE & bus.data = 1 : 1;
			TRUE : data[1];
		esac;

		init(out) := 0;
		next(out) := case
			gnt_L1 & bus.address = 0 & bus.ctrl = BUS_READ & data[0] = 0 : 0;
			gnt_L1 & bus.address = 0 & bus.ctrl = BUS_READ & data[0] = 1 : 1;
			gnt_L1 & bus.address = 1 & bus.ctrl = BUS_READ & data[1] = 0 : 0;
			gnt_L1 & bus.address = 1 & bus.ctrl = BUS_READ & data[1] = 1 : 1;
			gnt_L1 & bus.ctrl = BUS_WRITE : ACK;
			TRUE : out;
		esac;
		next(address) := bus.address;

-- end of memory_module

MODULE cpu_module(L1_rsp)
	VAR
		req: {NONE, CPU_READ, CPU_WRITE};
		address : {0, 1};
		data : {0, 1};

	DEFINE
		busy := (req = NONE) | L1_rsp;

	ASSIGN
		init(req) := NONE;
		next(req) := case
			busy : {NONE, CPU_READ, CPU_WRITE};
			TRUE : req;
		esac;

		init(address) := 0;
		next(address) := case
			busy : {0, 1};
			TRUE : address;
		esac;

		init(data) := 0;
		next(data) := case
			busy : {0, 1};
			TRUE : data;
		esac;

-- end of cpu_module

MODULE arbiter_module(L1_1_req, L1_2_req, L1_3_req, valid)
	VAR
		gnt : {MEM, MEM_1, MEM_2, MEM_3, 1, 2, 3};

	ASSIGN
		init(gnt) := MEM;
		next(gnt) := case
			gnt = MEM & L1_1_req & !valid : 1;
			gnt = MEM & L1_2_req & !valid : 2;
			gnt = MEM & L1_3_req & !valid : 3;

			gnt = MEM_1 & !valid : 1;
			gnt = MEM_2 & !valid : 2;
			gnt = MEM_3 & !valid : 3;

			gnt = 1 & L1_3_req : MEM_3;
			gnt = 1 & L1_2_req & !L1_3_req : MEM_2;
			gnt = 1 & !L1_2_req & !L1_3_req : MEM;

			gnt = 2 & L1_1_req : MEM_1;
			gnt = 2 & L1_3_req & !L1_1_req : MEM_3;
			gnt = 2 & !L1_3_req & !L1_1_req : MEM;

			gnt = 3 & L1_2_req : MEM_2;
			gnt = 3 & L1_1_req & !L1_2_req : MEM_1;
			gnt = 3 & !L1_1_req & !L1_2_req : MEM;

			TRUE : gnt;
		esac;

-- end of arbiter_module

MODULE bus_module(arb_gnt, L1_1, L1_2, L1_3, mem)
	VAR
		address : {0, 1};
		data : {0, 1, ACK};
		ctrl : {BUS_READ, BUS_WRITE};

	DEFINE
		valid := mem.valid;

	ASSIGN
		data := case
			arb_gnt = MEM | arb_gnt = MEM_1 | arb_gnt = MEM_2 | arb_gnt = MEM_3 : mem.out;
			arb_gnt = 1 & L1_1.data = 0 : 0;
			arb_gnt = 1 & L1_1.data = 1 : 1;
			arb_gnt = 2 & L1_2.data = 0 : 0;
			arb_gnt = 2 & L1_2.data = 1 : 1;
			arb_gnt = 3 & L1_3.data = 0 : 0;
			arb_gnt = 3 & L1_3.data = 1 : 1;
		esac;
		ctrl := case
			arb_gnt = 1 & L1_1.state = L1_READ : BUS_READ;
			arb_gnt = 1 & L1_1.state = L1_WRITE : BUS_WRITE;
			arb_gnt = 2 & L1_2.state = L1_READ : BUS_READ;
			arb_gnt = 2 & L1_2.state = L1_WRITE : BUS_WRITE;
			arb_gnt = 3 & L1_3.state = L1_READ : BUS_READ;
			arb_gnt = 3 & L1_3.state = L1_WRITE : BUS_WRITE;
			TRUE : BUS_READ;
		esac;
		address := case
			arb_gnt = MEM | arb_gnt = MEM_1 | arb_gnt = MEM_2 | arb_gnt = MEM_3 : mem.address;
			arb_gnt = 1 : L1_1.address;
			arb_gnt = 2 : L1_2.address;
			arb_gnt = 3 : L1_3.address;

		esac;

-- end of bus_module

MODULE cache_module(cpu, bus, prev_valid)
	VAR
		rsp : {NONE, 0, 1, ACK};
		state : {IDLE, L1_READ, L1_WRITE};
		address : {0, 1};
		data : {0, 1};
		word_address : {NONE, 0, 1};
		word_data : {0, 1};

	DEFINE
		req := ((cpu.req = CPU_READ & cpu.address != word_address) | 
			   (cpu.req = CPU_WRITE) | (state != IDLE)) & !prev_valid;
		ignore_mem_ack := (bus.data = ACK) & ((bus.address = 0 & word_address = 0) | (bus.address = 1 & word_address = 1));

	ASSIGN
		init(state) := IDLE;
		next(state) := case
			state = IDLE & cpu.req = CPU_READ & cpu.address != word_address : L1_READ;
			state = IDLE & cpu.req = CPU_WRITE : L1_WRITE;
			state != IDLE & bus.valid : IDLE;
			TRUE : state;
		esac;
		next(address) := case
			state = IDLE & cpu.req != NONE : cpu.address;
			TRUE : address;
		esac;
		next(data) := case
			state = IDLE & cpu.req != NONE : cpu.data;
			TRUE : data;
		esac;

		rsp := case
			bus.valid & bus.data = 0 : 0;
			bus.valid & bus.data = 1 : 1;
			bus.valid & bus.data = ACK & !ignore_mem_ack : ACK;
			state = IDLE & cpu.req = CPU_READ & cpu.address = word_address & word_data = 0 : 0;
			state = IDLE & cpu.req = CPU_READ & cpu.address = word_address & word_data = 1 : 1;
			state = IDLE & cpu.req = CPU_WRITE & cpu.address = word_address : ACK;
			TRUE : NONE;
		esac;

		init(word_address) := NONE;
		next(word_address) := case
			bus.valid & state = L1_READ & address = 0 : 0;
			bus.valid & state = L1_READ & address = 1 : 1;
			TRUE : word_address;
		esac;
		init(word_data) := 0;
		next(word_data) := case
			bus.valid & state = L1_READ & rsp = 0 : 0;
			bus.valid & state = L1_READ & rsp = 1 : 1;
			cpu.req = CPU_WRITE & cpu.address = word_address : cpu.data;
			TRUE : word_data;
		esac;


-- end of cache_module

MODULE main
	VAR
		prev_valid: boolean;
		memory : memory_module(arbiter.gnt = 1 | arbiter.gnt = 2 | arbiter.gnt = 3, bus);
		cpu_1 : cpu_module(L1_1.rsp != NONE);
		cpu_2 : cpu_module(L1_2.rsp != NONE);
		cpu_3 : cpu_module(L1_3.rsp != NONE);
		arbiter : arbiter_module(L1_1.req, L1_2.req, L1_3.req, bus.valid);
		bus : bus_module(arbiter.gnt, L1_1, L1_2, L1_3, memory);
		L1_1 : cache_module(cpu_1, bus, prev_valid);
		L1_2 : cache_module(cpu_2, bus, prev_valid);
		L1_3 : cache_module(cpu_3, bus, prev_valid);

	ASSIGN
		init(prev_valid) := bus.valid;
		next(prev_valid) := bus.valid;

SPEC AG ((cpu_3.req != NONE))
